From 1c21249a6a921ae4597cc1bd8833db22bfad3071 Mon Sep 17 00:00:00 2001
From: gargi-sahaSBU <gsaha@cs.stonybrook.edu>
Date: Wed, 1 Feb 2017 23:20:48 -0500
Subject: [PATCH 1/5] Separating request and response logic in top.sv

---
 system.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/system.cpp b/system.cpp
index 30b3bee..296db8f 100644
--- a/system.cpp
+++ b/system.cpp
@@ -190,7 +190,7 @@ void System::dram_read_complete(unsigned id, uint64_t address, uint64_t clock_cy
     map<uint64_t, int>::iterator tag = addr_to_tag.find(address);
     assert(tag != addr_to_tag.end());
     for(int i = 0; i < 64; i += 8) {
-        //cerr << "fill data from " << std::hex << (address+(i&63)) <<  ": " << tx_queue.rbegin()->first << " on tag " << tag->second << endl;
+        //cerr << "fill data from " << address<< " "<<std::hex << (address+(i&63)) <<  ": " << tx_queue.rbegin()->first << " on tag " << tag->second << endl;
         tx_queue.push_back(make_pair(*((uint64_t*)(&ram[((address&(~63))+((address+i)&63))])),tag->second));
     }
     addr_to_tag.erase(tag);
-- 
2.7.4


From 7c2f68a4bfc5571951fc27d686cb9f9b3820ecf1 Mon Sep 17 00:00:00 2001
From: Sagar Shah <schshah@cs.stonybrook.edu>
Date: Wed, 15 Mar 2017 16:31:38 -0400
Subject: [PATCH 2/5] Construct page table in system.cpp: part 1

---
 system.cpp | 60 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 60 insertions(+)

diff --git a/system.cpp b/system.cpp
index 296db8f..7489b75 100644
--- a/system.cpp
+++ b/system.cpp
@@ -47,6 +47,9 @@ System::System(Vtop* top, unsigned ramsize, const char* ramelf, int ps_per_clock
 {
     ram = (char*) malloc(ramsize);
     assert(ram);
+    bitset<GIGA/PAGE_SIZE> memmap;
+    memmap[0] = true;
+    init_page_table(0);
     
     // load the program image
     if (ramelf) top->entry = load_elf(ramelf);
@@ -199,6 +202,63 @@ void System::dram_read_complete(unsigned id, uint64_t address, uint64_t clock_cy
 void System::dram_write_complete(unsigned id, uint64_t address, uint64_t clock_cycle) {
 }
 
+uint64_t System::get_random_page(){
+	int page_no;
+	// This logic could be improved but then we (GIGA/PAGE_SIZE) space
+	// Hence sticking to this logic since the number of pages used will be less for us
+	do{
+		page_no = rand()%(GIGA/PAGE_SIZE);
+	}while(memmap[page_no]);
+	memmap[page_no] = true;
+	return page_no;
+}
+
+void System::init_page_table(uint64_t table_addr){
+	for(int i=0;i<1024;i++) {
+		*((__uint64_t*)(&ram[table_addr+i*8])) = 0;
+	}
+}
+
+uint64_t System::get_new_pte(uint64_t base_addr, int vpn, bool isleaf){
+	__uint64_t addr = base_addr + vpn*8;
+	__uint64_t pte = (*(__uint64_t*)&ram[addr]);
+	__uint64_t page_no;
+	if(!(pte&VALID_PAGE)){
+		page_no = get_random_page(memmap);
+		if(isleaf)
+			(*(__uint64_t*)&ram[addr]) = (page_no<<10) | VALID_PAGE;
+		else
+			(*(__uint64_t*)&ram[addr]) = (page_no<<10) | VALID_PAGE_DIR;
+		pte = (*(__uint64_t*)&ram[addr]);
+		init_page_table(pte);
+	}
+	return pte;
+}
+
+uint64_t System::get_old_pte(uint64_t base_addr, int vpn){
+	__uint64_t addr = base_addr + vpn*8;
+	__uint64_t pte = (*(__uint64_t*)&ram[addr]);
+	if(!(pte&VALID_PAGE)){
+		cerr << pte <<" invalid pte" <<endl;
+		return 0;
+	}
+	return pte;
+}
+
+uint64_t System::virt_to_new_phy(uint64_t virt_addr) {
+	int vpn;
+	__uint64_t pte, phy_offset, tmp_virt_addr;
+	__uint64_t pt_base_addr = 0;
+	phy_offset = virt_addr & 0x0fff;
+	tmp_virt_addr = virt_addr >> 12;
+	for(int i=0;i<4;i++) {
+		vpn = tmp_virt_addr & (0x01ff << 9*(3-i));
+		pte = get_new_pte(pt_base_addr, vpn, i == 3);
+		pt_base_addr = ((pte&0x0000ffffffffffff)>>10);
+	}
+	return (pt_base_addr << 12) | phy_offset;
+}
+
 uint64_t System::load_elf(const char* filename) {
     
     // check libelf version
-- 
2.7.4


From 5434f37df5e95b6cf9f473772fee0ec53615a554 Mon Sep 17 00:00:00 2001
From: Sagar Shah <schshah@cs.stonybrook.edu>
Date: Wed, 15 Mar 2017 17:15:33 -0400
Subject: [PATCH 3/5] Construct page table in system.cpp: part 2

---
 system.cpp | 24 +++++++++++++++++++++---
 1 file changed, 21 insertions(+), 3 deletions(-)

diff --git a/system.cpp b/system.cpp
index 7489b75..626e8e4 100644
--- a/system.cpp
+++ b/system.cpp
@@ -224,7 +224,7 @@ uint64_t System::get_new_pte(uint64_t base_addr, int vpn, bool isleaf){
 	__uint64_t pte = (*(__uint64_t*)&ram[addr]);
 	__uint64_t page_no;
 	if(!(pte&VALID_PAGE)){
-		page_no = get_random_page(memmap);
+		page_no = get_random_page();
 		if(isleaf)
 			(*(__uint64_t*)&ram[addr]) = (page_no<<10) | VALID_PAGE;
 		else
@@ -292,8 +292,26 @@ uint64_t System::load_elf(const char* filename) {
       // copy segment content from file to memory
       off_t off = lseek(fileDescriptor, shdr.sh_offset, SEEK_SET);
       assert(-1 != off);
-      size_t len = read(fileDescriptor, (void*)(ram + 0/* addr */), shdr.sh_size);
-      assert(len == shdr.sh_size);
+
+      int total_full_pages = shdr.sh_size/PAGE_SIZE;
+      uint64_t virt_addr=0, phy_addr;
+      size_t len, last_page_len = shdr.sh_size % PAGE_SIZE;
+      cout << "Total full pages: " << total_full_pages << endl;
+      cout << "Total size: " << shdr.sh_size << endl;
+      cout << "Total last page size: " << last_page_len << endl;
+      for(int i = 0; i < total_full_pages; i++) {
+        phy_addr = virt_to_new_phy(virt_addr);
+        cout << "Virtual addr: " << virt_addr << " Physical addr: " << phy_addr << endl;
+        len = read(fileDescriptor, (void*)(ram + phy_addr/* addr */), PAGE_SIZE);
+        assert(len == PAGE_SIZE);
+        virt_addr += PAGE_SIZE;
+      }
+      if(last_page_len > 0) {
+        phy_addr = virt_to_new_phy(virt_addr);
+        cout << "Virtual addr: " << virt_addr << " Physical addr: " << phy_addr << endl;
+        len = read(fileDescriptor, (void*)(ram + phy_addr/* addr */), last_page_len);
+        assert(len == last_page_len);
+      }
       break; // just load the first one
     }
     
-- 
2.7.4


From fdac5154b2a6e0ad91d94e9e418aa94d68d208d5 Mon Sep 17 00:00:00 2001
From: Sagar Shah <schshah@cs.stonybrook.edu>
Date: Wed, 15 Mar 2017 17:46:06 -0400
Subject: [PATCH 4/5] Contruction page tables: part 3

---
 system.cpp | 22 +++++++++++++++++++++-
 1 file changed, 21 insertions(+), 1 deletion(-)

diff --git a/system.cpp b/system.cpp
index 626e8e4..84bb040 100644
--- a/system.cpp
+++ b/system.cpp
@@ -235,6 +235,7 @@ uint64_t System::get_new_pte(uint64_t base_addr, int vpn, bool isleaf){
 	return pte;
 }
 
+// function for testing
 uint64_t System::get_old_pte(uint64_t base_addr, int vpn){
 	__uint64_t addr = base_addr + vpn*8;
 	__uint64_t pte = (*(__uint64_t*)&ram[addr]);
@@ -245,6 +246,21 @@ uint64_t System::get_old_pte(uint64_t base_addr, int vpn){
 	return pte;
 }
 
+// function for testing
+uint64_t System::virt_to_old_phy(uint64_t virt_addr) {
+	int vpn;
+	__uint64_t pte, phy_offset, tmp_virt_addr;
+	__uint64_t pt_base_addr = 0;
+	phy_offset = virt_addr & 0x0fff;
+	tmp_virt_addr = virt_addr >> 12;
+	for(int i=0;i<4;i++) {
+		vpn = tmp_virt_addr & (0x01ff << 9*(3-i));
+		pte = get_old_pte(pt_base_addr, vpn);
+		pt_base_addr = ((pte&0x0000ffffffffffff)>>10);
+	}
+	return (pt_base_addr << 12) | phy_offset;
+}
+
 uint64_t System::virt_to_new_phy(uint64_t virt_addr) {
 	int vpn;
 	__uint64_t pte, phy_offset, tmp_virt_addr;
@@ -294,13 +310,15 @@ uint64_t System::load_elf(const char* filename) {
       assert(-1 != off);
 
       int total_full_pages = shdr.sh_size/PAGE_SIZE;
-      uint64_t virt_addr=0, phy_addr;
+      uint64_t virt_addr=0, phy_addr, tmp_phy_addr;
       size_t len, last_page_len = shdr.sh_size % PAGE_SIZE;
       cout << "Total full pages: " << total_full_pages << endl;
       cout << "Total size: " << shdr.sh_size << endl;
       cout << "Total last page size: " << last_page_len << endl;
       for(int i = 0; i < total_full_pages; i++) {
         phy_addr = virt_to_new_phy(virt_addr);
+        tmp_phy_addr = virt_to_old_phy(virt_addr);
+        assert(phy_addr == tmp_phy_addr);
         cout << "Virtual addr: " << virt_addr << " Physical addr: " << phy_addr << endl;
         len = read(fileDescriptor, (void*)(ram + phy_addr/* addr */), PAGE_SIZE);
         assert(len == PAGE_SIZE);
@@ -308,6 +326,8 @@ uint64_t System::load_elf(const char* filename) {
       }
       if(last_page_len > 0) {
         phy_addr = virt_to_new_phy(virt_addr);
+        tmp_phy_addr = virt_to_old_phy(virt_addr);
+        assert(phy_addr == tmp_phy_addr);
         cout << "Virtual addr: " << virt_addr << " Physical addr: " << phy_addr << endl;
         len = read(fileDescriptor, (void*)(ram + phy_addr/* addr */), last_page_len);
         assert(len == last_page_len);
-- 
2.7.4


From 24f938904250fc4e908fc136995684bc58af38a7 Mon Sep 17 00:00:00 2001
From: Sagar Shah <schshah@cs.stonybrook.edu>
Date: Wed, 15 Mar 2017 20:09:27 -0400
Subject: [PATCH 5/5] Bugfix: Set the page_base_addr properly

---
 system.cpp | 12 +++++++-----
 1 file changed, 7 insertions(+), 5 deletions(-)

diff --git a/system.cpp b/system.cpp
index 84bb040..31ff42a 100644
--- a/system.cpp
+++ b/system.cpp
@@ -116,7 +116,7 @@ void System::tick(int clk) {
         top->bus_respcyc = 1;
         top->bus_resp = tx_queue.begin()->first;
         top->bus_resptag = tx_queue.begin()->second;
-        //cerr << "responding data " << top->bus_resp << " on tag " << std::hex << top->bus_resptag << endl;
+        //cout << "responding data " << top->bus_resp << " on tag " << std::hex << top->bus_resptag << endl;
     } else {
         top->bus_respcyc = 0;
         top->bus_resp = 0xaaaaaaaaaaaaaaaaULL;
@@ -232,6 +232,8 @@ uint64_t System::get_new_pte(uint64_t base_addr, int vpn, bool isleaf){
 		pte = (*(__uint64_t*)&ram[addr]);
 		init_page_table(pte);
 	}
+	cout << "page_no: " << page_no << endl;
+	cout << "PTE: " << pte << endl;
 	return pte;
 }
 
@@ -256,9 +258,9 @@ uint64_t System::virt_to_old_phy(uint64_t virt_addr) {
 	for(int i=0;i<4;i++) {
 		vpn = tmp_virt_addr & (0x01ff << 9*(3-i));
 		pte = get_old_pte(pt_base_addr, vpn);
-		pt_base_addr = ((pte&0x0000ffffffffffff)>>10);
+		pt_base_addr = ((pte&0x0000ffffffffffff)>>10)<<12;
 	}
-	return (pt_base_addr << 12) | phy_offset;
+	return (pt_base_addr) | phy_offset;
 }
 
 uint64_t System::virt_to_new_phy(uint64_t virt_addr) {
@@ -270,9 +272,9 @@ uint64_t System::virt_to_new_phy(uint64_t virt_addr) {
 	for(int i=0;i<4;i++) {
 		vpn = tmp_virt_addr & (0x01ff << 9*(3-i));
 		pte = get_new_pte(pt_base_addr, vpn, i == 3);
-		pt_base_addr = ((pte&0x0000ffffffffffff)>>10);
+		pt_base_addr = ((pte&0x0000ffffffffffff)>>10)<<12;
 	}
-	return (pt_base_addr << 12) | phy_offset;
+	return (pt_base_addr) | phy_offset;
 }
 
 uint64_t System::load_elf(const char* filename) {
-- 
2.7.4

